.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "JOSE\-JWK\-GEN" "1" "May 2017" "" ""
.
.SH "NAME"
\fBjose\-jwk\-gen\fR \- Creates a random JWK for each input JWK template
.
.SH "SYNOPSIS"
\fBjose jwk gen\fR \-i JWK [\-o JWK]
.
.SH "OVERVIEW"
The \fBjose jwk gen\fR command generates a key from one or more JWK(Set) templates\. If a single template is given as input, a single JWK will be output\. However, if multiple templates are given as input, a single JWKSet will be output containing all the keys\.
.
.P
The best way to generate a key is to use an algorithm, for example:
.
.IP "" 4
.
.nf

$ jose jwk gen \-i \'{"alg":"HS256"}\' \.\.\.
$ jose jwk gen \-i \'{"alg":"RS256"}\' \.\.\.
$ jose jwk gen \-i \'{"alg":"ES256"}\' \.\.\.
.
.fi
.
.IP "" 0
.
.P
Note that when generating from an algorithm, an appropriate "key_ops" parameter is also emitted automatically\.
.
.P
However, you may also specify key parameters:
.
.IP "" 4
.
.nf

$ jose jwk gen \-i \'{"kty":"EC","crv":"P\-256"}\' \.\.\.
$ jose jwk gen \-i \'{"kty":"oct","bytes":32}\' \.\.\.
$ jose jwk gen \-i \'{"kty":"RSA","bits":4096}\' \.\.\.
.
.fi
.
.IP "" 0
.
.P
Note that the "bytes" and "bits" parameters are non\-standard, so they will be removed from the output JWK(Set)\.
.
.SH "OPTIONS"
.
.TP
\fB\-i\fR \fIJSON\fR, \fB\-\-input\fR=\fIJSON\fR
Parse JWK(Set) template from JSON
.
.TP
\fB\-i\fR \fIFILE\fR, \fB\-\-input\fR=\fIFILE\fR
Read JWK(Set) template from FILE
.
.TP
\fB\-i\fR \-, \fB\-\-input\fR=\-
Read JWK(Set) template from standard input
.
.TP
\fB\-o\fR \fIFILE\fR, \fB\-\-output\fR=\fIFILE\fR
Write JWK(Set) to FILE
.
.TP
\fB\-o\fR \-, \fB\-\-output\fR=\-
Write JWK(Set) to standard input
.
.SH "AUTHOR"
Nathaniel McCallum <npmccallum@redhat\.com>
.
.SH "SEE ALSO"
\fBjose\-alg\fR(1), \fBjose\-jwe\-dec\fR(1), \fBjose\-jwe\-enc\fR(1), \fBjose\-jwk\-exc\fR(1), \fBjose\-jwk\-pub\fR(1), \fBjose\-jwk\-thp\fR(1), \fBjose\-jwk\-use\fR(1), \fBjose\-jws\-sig\fR(1), \fBjose\-jws\-ver\fR(1),
